struct Edge
{
   int x, w;
   Edge() {}
   Edge(int a, int b) { x = a; w = b; }
   bool operator < (const Edge& b) const
   { return w > b.w; } //Since the priority queue sorts in descending order
};
 
#define MAX_NODES 10005
bool seen[MAX_NODES];
vector<Edge> graph[MAX_NODES];  //Adjacency List
 
void dijkstra(int start, int dist[], int n)  //From one node to all others
{
   fill(dist, dist+n, -1); // Initial distances
   priority_queue<Edge> pq;
   pq.push(Edge(start,0)); //initial edge
   while (!pq.empty())
   {
      Edge c = pq.top();
      pq.pop();
      if (seen[c.x]) continue;
      seen[c.x] = true;  //mark as seen
      dist[c.x] = c.w;   //remember the shortest path to c.x
      for (int i=0; i<graph[c.x].size(); i++)
         if ( !seen[graph[c.x][i].x] )  //if not seen yet, add it
            pq.push( Edge( graph[c.x][i].x, c.w + graph[c.x][i].w ) );
   }
}
 
NOTE FOR JAVA - to avoid generic creation
static ArrayList<Edge> edges[] = new ArrayList[10000];
