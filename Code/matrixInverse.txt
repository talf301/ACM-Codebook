Matrix inverse() //gaussian elimination
{                           
   Matrix L = new Matrix(n, n);
   for (int i=0; i<n; i++)
      for (int j=0; j<n; j++)
         L.mat[i][j] = mat[i][j];
   Matrix R = new Matrix(n, n);
   for (int i=0; i<n; i++) R.mat[i][i] = 1;
   for (int i=0; i<n; i++)
   {
      if (abs(L.mat[i][i]) < 1e-14) //a zero along the pricipal diagonal
         for (int j=i+1; j<n; j++)
            if (abs(L.mat[j][i]) > 1e-14) 
            {
               L.swapRow(j, i);	 //swap row j with row i
	        R.swapRow(j, i);
	        break;
            }			
      if (abs(L.mat[i][i]-1.0) > 1e-14) //if it's not 1.0, scale down entire row
      {
         double f = L.mat[i][i];
	  for (int j=0; j<n; j++)
	  { L.mat[i][j] /= f; R.mat[i][j] /= f; }
      }
      for (int j=0; j<n; j++) 
         if (i!=j && abs(L.mat[j][i]) > 1e-14)  //found non-zero element underneath
	  {
	     double f = L.mat[j][i];
	     for (int jj=0; jj<n; jj++) //subtract scaled row
	     { L.mat[j][jj] -= f*L.mat[i][jj]; R.mat[j][jj] -= f*R.mat[i][jj];	}
	  }
   }
   return R;
}
